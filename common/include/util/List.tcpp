/**
 * @file List.tcpp template definitions, included by List.h
 */

#include "assert.h"


template<typename ValueType>
List<ValueType>::List() : BaseList<ValueType>::BaseList()
{

}


template<typename ValueType>
List<ValueType>::~List()
{
  while(this->first_node_)
  {
    ListNode<ValueType> *tmp = this->first_node_->getNextNode();
    delete this->first_node_;
    this->first_node_ = tmp;
  }
}


template<typename ValueType>
void List<ValueType>::pushBack(typename BaseList<ValueType>::const_reference element)
{
  ListNode<ValueType> *new_node = new ListNode<ValueType>(element);

  if(this->last_node_)
  {
    this->last_node_->setNextNode(new_node);
    new_node->setPreviousNode(this->last_node_);
    this->last_node_ = new_node;
  }
  else
    this->first_node_ = this->last_node_ = new_node;

  ++this->number_of_elements_;
}


template<typename ValueType>
void List<ValueType>::pushFront(typename BaseList<ValueType>::const_reference element)
{
  ListNode<ValueType> *new_node = new ListNode<ValueType>(element);

  if(this->first_node_)
  {
    this->first_node_->setPreviousNode(new_node);
    new_node->setNextNode(this->first_node_);
    this->first_node_ = new_node;
  }
  else
    this->first_node_ = this->last_node_ = new_node;

  ++this->number_of_elements_;
}


template<typename ValueType>
void List<ValueType>::insert(typename BaseList<ValueType>::size_type index, typename BaseList<ValueType>::const_reference element)
{
  if(index > this->number_of_elements_)
    return;

  ListNode<ValueType> *node = this->first_node_;
  ListNode<ValueType> *new_node = new ListNode<ValueType>(element);

  if(index && node)
  {
    do
      node = node->getNextNode();
    while(--index && node);
  }

  if(node)
  {
    if(node == this->first_node_)
      this->first_node_ = new_node;
    else
      // only has to be done for node != first
      node->getPreviousNode()->setNextNode(new_node);

    node->setPreviousNode(new_node);

    new_node->setNextNode(node);
    new_node->setPreviousNode(node->getPreviousNode());
  }
  else
  {
    if(this->last_node_)
    {
      this->last_node_->setNextNode(new_node);
      new_node->setPreviousNode(this->last_node_);

      this->last_node_ = new_node;
    }
    else
      this->first_node_ = this->last_node_ = new_node;
  }

  ++this->number_of_elements_;
}


template<typename ValueType>
void List<ValueType>::rotateBack()
{
  // this command is senseless with <= 1 elements in the list
  if(this->number_of_elements_ <= 1)
    return;

  ListNode<ValueType> *first = this->first_node_->getNextNode();
  this->first_node_->setNextNode(0);
  first->setPreviousNode(0);

  this->last_node_->setNextNode(this->first_node_);
  this->first_node_->setPreviousNode(this->last_node_);

  this->last_node_ = this->first_node_;
  this->first_node_ = first;
}


template<typename ValueType>
void List<ValueType>::rotateFront()
{
  // this command is senseless with <= 1 elements in the list
  if(this->number_of_elements_ <= 1)
    return;

  ListNode<ValueType> *last = this->last_node_->getPreviousNode();
  this->last_node_->setPreviousNode(0);
  last->setNextNode(0);

  this->first_node_->setPreviousNode(this->last_node_);
  this->last_node_->setNextNode(this->first_node_);

  this->first_node_ = this->last_node_;
  this->last_node_ = last;
}
