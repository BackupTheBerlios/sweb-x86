/**
 * @file ListNode.tcpp template definitions, included by ListNode.h
 *
 */

#ifndef SWAP_FUNCTION__
#define SWAP_FUNCTION__
/**
 * swaps two elements
 * @param first the first element
 * @param second the second element
 */
template<typename ValueType>
void swap(ValueType &first, ValueType &second)
{
  ValueType tmp = first;
  first = second;
  second = tmp;
}
#endif // SWAP_FUNCTION__


template<typename ValueType>
ListNode<ValueType>::ListNode() : next_node_(0),
                                  previous_node_(0)
{

}


template<typename ValueType>
ListNode<ValueType>::ListNode(const_reference element) : element_(element),
                                                         next_node_(0),
                                                         previous_node_(0)
{

}


template<typename ValueType>
ListNode<ValueType>::ListNode(const ListNode<ValueType> &instance)
{
  next_node_ = instance.next_node_;
  previous_node_ = instance.previous_node_;
  element_ = instance.element_;
}


template<typename ValueType>
ListNode<ValueType>::~ListNode()
{

}


template<typename ValueType>
ListNode<ValueType>& ListNode<ValueType>::operator = (
  const ListNode<ValueType> &instance)
{
  ListNode<ValueType> new_node(instance);

  swap(this->next_node_, new_node.next_node_);
  swap(this->previous_node_, new_node.previous_node_);
  swap(this->element_, new_node.element_);

  return (*this);
}


template<typename ValueType>
bool ListNode<ValueType>::hasNextNode() const
{
  return (next_node_ != 0);
}


template<typename ValueType>
bool ListNode<ValueType>::hasPreviousNode() const
{
  return (previous_node_ != 0);
}


template<typename ValueType>
ListNode<ValueType> *ListNode<ValueType>::getNextNode() const
{
  return next_node_;
}


template<typename ValueType>
ListNode<ValueType> *ListNode<ValueType>::getPreviousNode() const
{
  return previous_node_;
}


template<typename ValueType>
void ListNode<ValueType>::setNextNode(ListNode<ValueType> *next_node)
{
  next_node_ = next_node;
}


template<typename ValueType>
void ListNode<ValueType>::setPreviousNode(ListNode<ValueType> *previous_node)
{
  previous_node_ = previous_node;
}


template<typename ValueType>
typename ListNode<ValueType>::reference ListNode<ValueType>::getElement()
{
  return element_;
}


template<typename ValueType>
typename ListNode<ValueType>::const_reference ListNode<ValueType>::getElement() const
{
  return element_;
}


template<typename ValueType>
void ListNode<ValueType>::setElement(const_reference element)
{
  element_ = element;
}

