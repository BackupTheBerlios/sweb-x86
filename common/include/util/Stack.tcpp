// Projectname: SWEB
// Simple operating system for educational purposes
//
// Copyright (C) 2005  Andreas Niederl
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.



/**
 * CVS Log Info for $RCSfile: Stack.tcpp,v $
 *
 * $Id: Stack.tcpp,v 1.2 2005/09/12 23:29:06 aniederl Exp $
 * $Log: Stack.tcpp,v $
 * Revision 1.1  2005/05/26 01:08:37  aniederl
 * initial import of List, Queue and Stack data structures
 *
 */


/**
 * template definitions, included by List.h
 *
 */


#ifndef Swap_Function___
#define Swap_Function___
// FIXXXME: don't know where to put that function
/**
 * swaps two elements
 * @param first the first element
 * @param second the second element
 *
 */
template<typename ValueType>
void swap(ValueType &first, ValueType &second)
{
  ValueType tmp = first;
  first = second;
  second = tmp;
}
#endif // Swap_Function___


//----------------------------------------------------------------------
/**
 * default constructor for class Stack
 * @param node_size the size of the stack nodes
 */
template<typename ValueType>
Stack<ValueType>::Stack()
{
  list_ = new List<ValueType>();
}


//----------------------------------------------------------------------
/**
 * copy constructor for class Stack
 * @param instance is a constant reference to an object of
 * type Stack
 */
template<typename ValueType>
Stack<ValueType>::Stack(const Stack<ValueType> &instance)
{
  list_ = instance.list_;
}


//----------------------------------------------------------------------
/**
 * destructor for class Stack
 */
template<typename ValueType>
Stack<ValueType>::~Stack()
{
  delete list_;
}


//----------------------------------------------------------------------
/**
 * = operator for class Stack
 * @param instance is a reference to a Stack object
 * @return is a reference to a Stack object
 */
template<typename ValueType>
Stack<ValueType>& Stack<ValueType>::operator = (
  const Stack<ValueType> &instance)
{
  Stack<ValueType> new_stack(instance);

  swap(this->list_, new_stack.list_);

  return (*this);
}


//----------------------------------------------------------------------
/**
 * returns the size (number of elements) of the stack
 * @return the size (number of elements) of the stack
 *
 */
template<typename ValueType>
typename Stack<ValueType>::size_type Stack<ValueType>::size() const
{
  return list_->size();
}

//----------------------------------------------------------------------
/**
 * checks, if the stack is empty
 * @return true, if the stack is empty
 *
 */
template<typename ValueType>
bool Stack<ValueType>::empty() const
{
  return list_->empty();
}


//----------------------------------------------------------------------
/**
 * returns the element on the top of the stack
 * @return the element on the top of the stack
 *
 */
template<typename ValueType>
typename Stack<ValueType>::reference Stack<ValueType>::top()
{
  return list_->back();
}

//----------------------------------------------------------------------
/**
 * returns the element on the top of the stack
 * @return the element on the top of the stack
 *
 */
template<typename ValueType>
typename Stack<ValueType>::const_reference Stack<ValueType>::top() const
{
  return list_->back();
}

//----------------------------------------------------------------------
/**
 * pushes an element at the top of the stack
 * @param element the new element to add
 *
 */
template<typename ValueType>
void Stack<ValueType>::push(const_reference element)
{
  list_->pushBack(element);
}

//----------------------------------------------------------------------
/**
 * pops the top element from the stack
 *
 */
template<typename ValueType>
void Stack<ValueType>::pop()
{
  list_->popBack();
}
