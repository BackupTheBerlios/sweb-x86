/**
 * @file Stack.tcpp template definitions, included by Stack.h
 *
 */


#ifndef SWAP_FUNCTION__
#define SWAP_FUNCTION__
/**
 * swaps two elements
 * @param first the first element
 * @param second the second element
 *
 */
template<typename ValueType>
void swap(ValueType &first, ValueType &second)
{
  ValueType tmp = first;
  first = second;
  second = tmp;
}
#endif // SWAP_FUNCTION__


template<typename ValueType>
Stack<ValueType>::Stack()
{
  list_ = new List<ValueType>();
}


template<typename ValueType>
Stack<ValueType>::Stack(const Stack<ValueType> &instance)
{
  list_ = instance.list_;
}


template<typename ValueType>
Stack<ValueType>::~Stack()
{
  delete list_;
}


template<typename ValueType>
Stack<ValueType>& Stack<ValueType>::operator = (
  const Stack<ValueType> &instance)
{
  Stack<ValueType> new_stack(instance);

  swap(this->list_, new_stack.list_);

  return (*this);
}


template<typename ValueType>
typename Stack<ValueType>::size_type Stack<ValueType>::size() const
{
  return list_->size();
}


template<typename ValueType>
bool Stack<ValueType>::empty() const
{
  return list_->empty();
}


template<typename ValueType>
typename Stack<ValueType>::reference Stack<ValueType>::top()
{
  return list_->back();
}


template<typename ValueType>
typename Stack<ValueType>::const_reference Stack<ValueType>::top() const
{
  return list_->back();
}


template<typename ValueType>
void Stack<ValueType>::push(const_reference element)
{
  list_->pushBack(element);
}


template<typename ValueType>
void Stack<ValueType>::pop()
{
  list_->popBack();
}
