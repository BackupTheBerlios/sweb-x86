/**
 * @file Queue.tcpp template definitions, included by Queue.h
 *
 */

#ifndef SWAP_FUNCTION__
#define SWAP_FUNCTION__
/**
 * swaps two elements
 * @param first the first element
 * @param second the second element
 *
 */
template<typename ValueType>
void swap(ValueType &first, ValueType &second)
{
  ValueType tmp = first;
  first = second;
  second = tmp;
}
#endif // SWAP_FUNCTION__


template<typename ValueType>
Queue<ValueType>::Queue()
{
  list_ = new List<ValueType>();
}


template<typename ValueType>
Queue<ValueType>::Queue(const Queue<ValueType> &instance)
{
  list_ = instance.list_;
}


template<typename ValueType>
Queue<ValueType>::~Queue()
{
  delete list_;
}


template<typename ValueType>
Queue<ValueType>& Queue<ValueType>::operator = (
  const Queue<ValueType> &instance)
{
  Queue<ValueType> new_queue(instance);

  swap(this->list_, new_queue.list_);

  return (*this);
}


template<typename ValueType>
typename Queue<ValueType>::size_type Queue<ValueType>::size() const
{
  return list_->size();
}


template<typename ValueType>
bool Queue<ValueType>::empty() const
{
  return list_->empty();
}


template<typename ValueType>
typename Queue<ValueType>::reference Queue<ValueType>::front()
{
  return list_->front();
}


template<typename ValueType>
typename Queue<ValueType>::const_reference Queue<ValueType>::front() const
{
  return list_->front();
}


template<typename ValueType>
typename Queue<ValueType>::reference Queue<ValueType>::back()
{
  return list_->back();
}


template<typename ValueType>
typename Queue<ValueType>::const_reference Queue<ValueType>::back() const
{
  return list_->back();
}


template<typename ValueType>
void Queue<ValueType>::push(const_reference element)
{
  list_->pushBack(element);
}


template<typename ValueType>
void Queue<ValueType>::pop()
{
  list_->popFront();
}
