/**
 * @file BaseList.tcpp template definitions, included by BaseList.h
 */

#include "assert.h"

#ifndef SWAP_FUNCTION__
#define SWAP_FUNCTION__

/**
 * swaps two elements
 * @param first the first element
 * @param second the second element
 *
 */
template<typename ValueType>
void swap(ValueType &first, ValueType &second)
{
  ValueType tmp = first;
  first = second;
  second = tmp;
}

#endif // SWAP_FUNCTION__

template<typename ValueType>
BaseList<ValueType>::BaseList() : first_node_(0),
                          last_node_(0),
                          number_of_elements_(0)
{

}


// thanks to Markus Steinberger
template<typename ValueType>
BaseList<ValueType>::BaseList(const BaseList<ValueType> &instance)
{
  number_of_elements_ = instance.number_of_elements_;

  // copy nodes
  if(instance.first_node_ != 0)
  {
    ListNode<ValueType> *node = new ListNode<ValueType>(*instance.first_node_);

    first_node_ = node;

    while(node->hasNextNode())
    {
      ListNode<ValueType> *next_node = new ListNode<ValueType>(
        *(node->getNextNode()));

      next_node->setPreviousNode(node);
      node->setNextNode(next_node);

      node = next_node;
    }

    last_node_ = node;
  }
  else
  {
    last_node_ = first_node_ = 0;
  }
}


template<typename ValueType>
BaseList<ValueType>::~BaseList()
{
  while(first_node_)
  {
    ListNode<ValueType> *tmp = first_node_->getNextNode();
    delete first_node_;
    first_node_ = tmp;
  }
}


template<typename ValueType>
BaseList<ValueType>& BaseList<ValueType>::operator = (const BaseList<ValueType> &instance)
{
  BaseList<ValueType> new_list(instance);

  swap(this->number_of_elements_, new_list.number_of_elements_);
  swap(this->first_node_, new_list.first_node_);
  swap(this->last_node_, new_list.last_node_);

  return (*this);
}


template<typename ValueType>
typename BaseList<ValueType>::size_type BaseList<ValueType>::size() const
{
  return number_of_elements_;
}


template<typename ValueType>
bool BaseList<ValueType>::empty() const
{
  return (number_of_elements_ == 0);
}


template<typename ValueType>
typename BaseList<ValueType>::reference BaseList<ValueType>::operator[](
  size_type index)
{
  assert(!empty() && index < size());

  ListNode<ValueType> *node = first_node_;

  if(index && node)
  {
    do
      node = node->getNextNode();
    while(--index && node);
  }

  assert(node);

  return node->getElement();
}


template<typename ValueType>
typename BaseList<ValueType>::const_reference BaseList<ValueType>::operator[](
  size_type index) const
{
  assert(!empty() && index < size());

  ListNode<ValueType> *node = first_node_;

  if(index && node)
  {
    do
      node = node->getNextNode();
    while(--index && node);
  }

  assert(node);

  return node->getElement();
}

template<typename ValueType>
typename BaseList<ValueType>::reference BaseList<ValueType>::front()
{
  assert(!empty());

  return first_node_->getElement();
}


template<typename ValueType>
typename BaseList<ValueType>::const_reference BaseList<ValueType>::front() const
{
  assert(!empty());

  return first_node_->getElement();
}


template<typename ValueType>
typename BaseList<ValueType>::reference BaseList<ValueType>::back()
{
  assert(!empty());

  return last_node_->getElement();
}


template<typename ValueType>
typename BaseList<ValueType>::const_reference BaseList<ValueType>::back() const
{
  assert(!empty());

  return last_node_->getElement();
}


template<typename ValueType>
void BaseList<ValueType>::popBack()
{
  if(!number_of_elements_)
    return;

  ListNode<ValueType> *last = last_node_->getPreviousNode();

  delete last_node_;

  --number_of_elements_;

  if(last)
  {
    last_node_ = last;
    last_node_->setNextNode(0);
  }
  else
  {
    if(number_of_elements_)
      last_node_ = first_node_;
    else
      last_node_ = first_node_ = 0;
  }
}


template<typename ValueType>
void BaseList<ValueType>::popFront()
{
  if(!number_of_elements_)
    return;

  ListNode<ValueType> *first = first_node_->getNextNode();

  delete first_node_;

  --number_of_elements_;

  if(first)
  {
    first_node_ = first;
    first_node_->setPreviousNode(0);
  }
  else
  {
    if(number_of_elements_)
      first_node_ = last_node_;
    else
      first_node_ = last_node_ = 0;
  }
}


template<typename ValueType>
void BaseList<ValueType>::remove(size_type index)
{
  if(index >= number_of_elements_)
    return;

  ListNode<ValueType> *node = first_node_;
  ListNode<ValueType> *next_node;
  ListNode<ValueType> *previous_node;

  if(index && node)
  {
    do
      node = node->getNextNode();
    while(--index && node);
  }

  assert(node);

  next_node = node->getNextNode();
  previous_node = node->getPreviousNode();

  if(previous_node)
    previous_node->setNextNode(next_node);
  else
    first_node_ = next_node;

  if(next_node)
    next_node->setPreviousNode(previous_node);
  else
    last_node_ = previous_node;

  delete node;

  --number_of_elements_;
}


template<typename ValueType>
void BaseList<ValueType>::swapList(BaseList<ValueType> &list)
{
  swap(this->number_of_elements_, list.number_of_elements_);
  swap(this->first_node_, list.first_node_);
  swap(this->last_node_, list.last_node_);
}


template<typename ValueType>
void BaseList<ValueType>::clear()
{
  while(first_node_)
  {
    ListNode<ValueType> *tmp = first_node_->getNextNode();
    delete first_node_;
    first_node_ = tmp;
  }

  number_of_elements_ = 0;
}
