vpath %.cpp ./source/*
vpath %.h   ./include/*

SWEB_INCLUDES	= -I ./include $(shell find $(SWEB_ROOT)/$(ARCH_PATH)/$(SWEB_ARCH)/ -type d -name "include" -printf "-I %p ") $(shell find $(SWEB_ROOT)/$(COMMON_PATH)/include -type d -regex '.*/\([^C][^/]*\|C[^V][^/]*\|CV[^S][^/]*\|CVS[^/]+\)' -printf "-I %p ")

CC		= gcc
CXX		= c++ 
C_ARGS = -g -Wall -W -O2 -fno-common -fno-gnu-linker -nostdinc++ -nostdinc -fno-builtin 
CXX_ARGS = $(C_ARGS) -nostdlib -fno-rtti -fno-exceptions

CFLAGS = $(C_ARGS) $(SWEB_INCLUDES) 
CXXFLAGS = $(CXX_ARGS) $(SWEB_INCLUDES) 

SOURCES = $(wildcard source/*.cpp) $(wildcard source/*/*.cpp)
SOURCES_ASM =  $(wildcard source/*.s) $(wildcard source/*/*.s)

OBJECTS = $(patsubst %,./objects/%,  $(patsubst %.cpp, %.o, $(SOURCES)) $(patsubst %.s, %.o, $(SOURCES_ASM)))

.PHONY: cleandep

all: .depend ./objects/dir_module.o 

.depend : $(SOURCES) $(SOURCES_ASM)
	echo > $@;
	if for f in $(SOURCES) $(SOURCES_ASM); do echo -n ./objects/$$(sed 's/\/[^/]*$$/\//' <<< $$f) >> $@;$(CXX) -MM -c $(CXXFLAGS) $$f >> $@; done; then true; else rm -f .depend; return 1; fi

./objects/dir_module.o: $(OBJECTS)
	ld -r -o $* $+
	@#find -iname "*.o" -exec rm {} \;

cleandep:
	rm -f .depend

-include .depend

objects/%.o : %.cpp
	$(CXX) -c $(CXXFLAGS)  $< -o $@
	
objects/%.o : %.s
	$(CC) -c $(CFLAGS)  $< -o $@


